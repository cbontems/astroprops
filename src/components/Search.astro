---
import { Sprite } from "astro-icon";
export interface Props {
	id: string;
	placeholder: string;
	selector: string;
	groupSelector?: string;
}
const { id, placeholder, selector, groupSelector } = Astro.props as Props;
const inlineStyle = `
    ${selector}[hidden] {
        display: none;
    }
`;
---

<section>
	<label>
		<input type="text" id={id} placeholder={placeholder} />
		<div>
			<Sprite
				pack="heroicons-outline"
				name="search"
				size={24}
				aria-hidden="true"
			/>
		</div>
		<span class="sr-only visually-hidden">Search</span>
	</label>
</section>

<style set:html={inlineStyle}></style>

<script src="https://polyfill.io/v3/polyfill.min.js?features=URLSearchParams"
></script>
<script type="module" define:vars={{ selector, groupSelector, id }}>
	/* https://gomakethings.com/how-to-create-a-search-page-for-a-static-website-with-vanilla-js/ */
	const stopWords = [
		"un",
		"une",
		"et",
		"sont",
		"ne sont pas",
		"comme",
		"par",
		"peut",
		"ne peut pas",
		"pourrait",
		"ne pourrait pas",
		"comment",
		"est",
		"n'est pas",
		"ça",
		"ces",
		"c'est",
		"ceci",
		"le",
		"leur",
		"là",
		"eux",
		"ils",
		"à",
		"aussi",
		"nous",
		"très",
		"était",
		"bien",
		"où",
		"quoi",
		"quel",
		"quand",
		"where",
		"avec",
		"tu",
		"toi",
		"ton",
		"tes",
	];
	const input = document.getElementById(id);
	const items = document.querySelectorAll(selector);
	const groups = groupSelector ? document.querySelectorAll(groupSelector) : [];
	const FPS_30 = 1000 / 30;
	function debounce(fn, timeout = 150) {
		let timer;
		return (...args) => {
			clearTimeout(timer);
			timer = setTimeout(() => fn.apply(this, args), timeout);
		};
	}
	const updateOpen = () => {
		requestAnimationFrame(() => {
			!!input.value || document.activeElement === input
				? input.parentElement.setAttribute("open", "")
				: input.parentElement.removeAttribute("open");
		});
	};
	const update = () => {
		updateOpen();
		const regexMap = input.value
			.toLowerCase()
			.split(" ")
			.filter((word) => word.length && !stopWords.includes(word))
			.map((word) => new RegExp(word, "i"));
		for (const item of items) {
			const isMatch =
				!regexMap.length ||
				regexMap.some((regex) => !!item.textContent.match(regex));
			isMatch
				? item.removeAttribute("hidden")
				: item.setAttribute("hidden", "");
		}
		for (const group of groups) {
			const matchedItems = group.querySelectorAll(`${selector}:not([hidden])`);
			matchedItems.length > 0
				? group.removeAttribute("hidden")
				: group.setAttribute("hidden", "");
		}
		updateURL();
	};
	const updateURL = () => {
		const q = input.value?.trim();
		if (q) {
			const params = new URLSearchParams();
			params.set("q", q);
			window.history.replaceState(null, null, `?${params.toString()}`);
		} else {
			const [href] = window.location.href.split("?");
			window.history.replaceState(null, null, href);
		}
	};
	const hydrateQuery = () => {
		const params = new URLSearchParams(location.search);
		input.value = params.get("q") || "";
	};
	input.addEventListener("input", debounce(update, FPS_30), true);
	input.addEventListener("focus", updateOpen, true);
	input.addEventListener("blur", updateOpen, true);
	hydrateQuery();
	update();
</script>
<style>
	section {
		@apply flex justify-end;
		width: calc(25ch + 2.5rem);
		min-width: calc(25ch + 2.5rem);
	}
	label {
		@apply flex rounded-full p-1 bg-neutral-50;
	}
	input {
		@apply pl-3 bg-transparent outline-none;
		line-height: 2.5rem;
		width: 25ch;
	}
	input::placeholder {
		@apply text-primary-900 opacity-75;
	}
	div {
		@apply flex items-center justify-center w-10 h-10 rounded-full bg-primary-700 text-neutral-50;
	}
	@media (max-width: 768px) {
		label,
		section {
			@apply w-full;
		}
		input {
			@apply flex-1 max-w-none;
		}
	}
	@media (hover: hover) {
		label {
			@apply bg-transparent;
		}
		label:not([open]) input {
			@apply max-w-0 pl-0;
		}
		input,
		div {
			transition: 250ms ease;
		}
		input:focus,
		input:not(:placeholder-shown) {
			padding: 0 0.5rem;
			padding-left: 0.75rem;
		}
		div {
			@apply bg-transparent text-primary-900;
		}
		label:hover,
		label[open] {
			@apply bg-neutral-50;
		}
		label:hover > input {
			max-width: 25ch;
			padding: 0 0.5rem;
			padding-left: 0.75rem;
		}
		label:hover > div,
		input:focus + div,
		input:not(:placeholder-shown) + div {
			@apply bg-primary-700 text-neutral-50;
		}
	}
</style>
