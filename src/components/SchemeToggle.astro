<button
	class="themeToggle"
	id="theme-toggle"
	aria-label="auto"
	aria-live="polite"
>
	<svg
		class="sunAndMoon"
		aria-hidden="true"
		width="24"
		height="24"
		viewBox="0 0 24 24"
	>
		<mask class="moon" id="moon-mask">
			<rect x="0" y="0" width="100%" height="100%" fill="white" stroke="none"
			></rect>
			<circle cx="24" cy="10" r="6" fill="black" stroke="none"></circle>
		</mask>
		<circle
			class="sun"
			cx="12"
			cy="12"
			r="6"
			mask="url(#moon-mask)"
			fill="currentColor"></circle>
		<g class="sunBeams" stroke="currentColor">
			<line x1="12" y1="1" x2="12" y2="3"></line>
			<line x1="12" y1="21" x2="12" y2="23"></line>
			<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
			<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
			<line x1="1" y1="12" x2="3" y2="12"></line>
			<line x1="21" y1="12" x2="23" y2="12"></line>
			<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
			<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
		</g>
	</svg>
</button>

<style>
	/* Default CSS goes here */
	.sunAndMoon > :is(.moon, .sun, .sunBeams) {
		transform-origin: center center;
	}
	.sunAndMoon > .moon > circle {
		transform: translate(2px);
	}
	.sunAndMoon > :is(.moon, .sun) {
		fill: var(--icon-fill);
		stroke: var(--icon-fill);
	}
	.themeToggle:is(:hover, :focus-visible) > .sunAndMoon > :is(.moon, .sun) {
		fill: var(--icon-fill-hover);
		stroke: var(--icon-fill-hover);
	}
	.sunAndMoon > .sunBeams {
		stroke: var(--icon-fill);
		stroke-width: 2px;
	}
	.themeToggle:is(:hover, :focus-visible) .sunAndMoon > .sunBeams {
		stroke: var(--icon-fill-hover);
	}
	[data-theme="dark"] .sunAndMoon > .sun {
		transform: scale(1.75);
	}
	[data-theme="dark"] .sunAndMoon > .sunBeams {
		opacity: 0;
	}
	[data-theme="dark"] .sunAndMoon > .moon > circle {
		transform: translate(-7px);
	}
	@supports (cx: 1) {
		[data-theme="dark"] .sunAndMoon > .moon > circle {
			transform: translate(0);
			cx: 17;
		}
	}

	@media (prefers-reduced-motion: no-preference) {
		.sunAndMoon > .sun {
			transition: transform 0.5s var(--ease-elastic-3);
		}
		.sunAndMoon > .sunBeams {
			transition: transform 0.5s var(--ease-elastic-4),
				opacity 0.5s var(--ease-3);
		}
		.sunAndMoon .moon > circle {
			transition: transform 0.25s var(--ease-out-5);
		}
		@supports (cx: 1) {
			.sunAndMoon .moon > circle {
				transition: cx 0.25s var(--ease-out-5);
			}
		}
		[data-theme="dark"] .sunAndMoon > .sun {
			transform: scale(1.75);
			transition-timing-function: var(--ease-3);
			transition-duration: 0.25s;
		}
		[data-theme="dark"] .sunAndMoon > .sunBeams {
			transform: rotate(-25deg);
			transition-duration: 0.15s;
		}
		[data-theme="dark"] .sunAndMoon > .moon > circle {
			transition-delay: 0.25s;
			transition-duration: 0.5s;
		}
	}

	.themeToggle {
		--size: 1.5em;
		--icon-fill: var(--text-2);
		--icon-fill-hover: var(--links);
		background: none;
		border: none;
		padding: 0;
		inline-size: var(--size);
		block-size: var(--size);
		margin-block: auto;
		margin-inline-start: var(--size);
		border-radius: 50%;
		cursor: pointer;
		touch-action: manipulation;
		-webkit-tap-highlight-color: transparent;
		outline-offset: 5px;
	}
	.themeToggle > svg {
		inline-size: 100%;
		block-size: 100%;
		stroke-linecap: round;
	}
	@media (min-width: 539px) {
		.themeToggle {
			order: 3;
		}
	}
</style>
<script>
	// theme toggle
	const getColorPreference = () => {
		if (localStorage.getItem("theme-preference"))
			return localStorage.getItem("theme-preference");
		else
			return window.matchMedia("(prefers-color-scheme: dark)").matches
				? "dark"
				: "light";
	};

	const setPreference = () => {
		localStorage.setItem("theme-preference", theme.value);
		reflectPreference();
	};

	const reflectPreference = () => {
		document.firstElementChild.setAttribute("data-theme", theme.value);
		document
			.querySelector("#theme-toggle")
			?.setAttribute("aria-label", theme.value);
	};

	const theme = {
		value: getColorPreference(),
	};

	// set early so no page flashes
	reflectPreference();

	window.onload = () => {
		// set on load so screen readers can see latest value on the button
		reflectPreference();

		document.querySelector("#theme-toggle").addEventListener("click", (e) => {
			theme.value = theme.value === "light" ? "dark" : "light";

			setPreference();
		});
	};

	window
		.matchMedia("(prefers-color-scheme: dark)")
		.addEventListener("change", ({ matches: isDark }) => {
			theme.value = isDark ? "dark" : "light";
			setPreference();
		});
</script>
